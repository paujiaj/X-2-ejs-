<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" type="text/css" href="css/foto-style.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@100;400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
    <script src="js/foto.js" defer></script>
    <script src="js/theme.js" defer></script>
    <title>Foto</title>
</head>

<body>
    <input type="checkbox" class="theme-btn" id="darkmode-toggle" />
    <nav>

        <div class="nav-links" id="navLinks">
            <i class="fi fa fa-times" onclick="hidemenu()"></i>
            <ul>
                <li><a class="navb" href="/">HOME</a></li>
                <li><a class="navb" href="/about">ABOUT</a></li>
                <li><a class="navb" href="/#X-2">X-2</a></li>
                <li><a class="navb" href="/foto">FOTO</a></li>
                <li><a href="/setting"><i class="fu fa fa-cog"></i></a></li>
            </ul>
        </div>
        <i class="fa fa-bars" onclick="showmenu()"></i>
    </nav>
    <header>
        <div class="foto-text">
            <h1>FOTO</h1>
            <div class="upload-btn">
                <a class="hero-btn" onclick="openPopup2()">UPLOAD</a>
            </div>
        </div>
    </header>
    <section class="server-image">
        <div class="container2">
            <div class="saved-div">
            </div>
        </div>
        <div id="popup-container" class="popup-container">
            <span class="close-popup" onclick="closePopup()">&times;</span>
            <img id="popup-image" class="popup-image" onclick="closePopup()" src="" alt="popup image">
        </div>
    </section>
    <section class="upload-page" id="upload-page">
        <span class="close-popup" onclick="closePopup2()">&times;</span>
        <main class="app">
            <div class="header">
                <p>UPLOAD IMAGES</p>
                <div class="server-message"></div>
            </div>

            <div class="input-div">
                <p>Drag & drop images here or <span class="browse">Browse</span></p>
                <input type="file" class="file" multiple="multiple" accept="image/png, image/jpg, image/jpeg">
            </div>
            <form id="queued-form">
                <div class="header">
                    <p>QUEUED</p>
                    <button type="submit">UPLOAD</button>
                </div>
                <div class="queued-div"></div>
            </form>
        </main>
    </section>


    <script>
        document.querySelector('.popup-foto span').onclick = () => {
            document.querySelector('.popup-foto').style.display = 'none';
        }
    </script>
    <script>

        var navLinks = document.getElementById("navLinks");
        function showmenu() {
            navLinks.style.right = "-12px";
        }
        function hidemenu() {
            navLinks.style.right = "-700px";
        }

    </script>
    <script>
        let queuedImagesArray = [],
            savedForm = document.querySelector("#saved-form"),
            queuedForm = document.querySelector("#queued-form"),
            savedDiv = document.querySelector(".saved-div"),
            queuedDiv = document.querySelector(".queued-div"),
            inputDiv = document.querySelector(".input-div"),
            input = document.querySelector(".input-div input"),
            serverMessage = document.querySelector(".server-message"),
            savedImages = JSON.parse('<%-JSON.stringify(images)%>')
        deleteImages = [];

        if (savedImages) displaySavedImages()

        function displaySavedImages() {
            let images = ""
            savedImages.forEach((image, index) => {
                images += `<div class="image">
                       <img src="https://localhost:3000/img/upload/${image}" alt="image">
                       <!---<span onclick="deleteSavedImage(${index})">&times;</span>--->
                       </div>`
            })
            savedDiv.innerHTML = images
        }

        function deleteSavedImage(index) {
            deleteImages.push(savedImages[index])
            savedImages.splice(index, 1)
            displaySavedImages()
        }

        input.addEventListener("change", () => {
            const files = input.files
            for (let i = 0; i < files.length; i++) {
                queuedImagesArray.push(files[i])
            }
            queuedForm.reset()
            displayQueuedImages()
        })

        inputDiv.addEventListener("drop", (e) => {
            e.preventDefault()
            const files = e.dataTransfer.files
            console.log(files)
            for (let i = 0; i < files.length; i++) {
                if (!files[i].type.match("image")) continue

                if (queuedImagesArray.every(image => image.name !== files[i].name))
                    queuedImagesArray.push(files[i])
            }
            displayQueuedImages()
        })

        function displayQueuedImages() {
            let images = ""
            queuedImagesArray.forEach((image, index) => {
                images += `<div class="image">
                       <img src="${URL.createObjectURL(image)}" alt="image">
                       <span onclick="deleteQueuedImage(${index})">&times;</span>
                       </div>`
            })
            queuedDiv.innerHTML = images
        }

        function deleteQueuedImage(index) {
            queuedImagesArray.splice(index, 1)
            displayQueuedImages()
        }

        queuedForm.addEventListener("submit", (e) => {
            e.preventDefault()
            sendQueuedImagesToServer()
        })

        function sendQueuedImagesToServer() {
            const formData = new FormData(queuedForm)

            queuedImagesArray.forEach((image, index) => {
                formData.append(`file[${index}]`, image)
            })

            fetch("upload", {
                method: "POST",
                body: formData
            })

                .then(response => {
                    if (response.status !== 200) throw Error(response.statusText)
                    location.reload()
                })

                .catch(error => {
                    serverMessage.innerHTML = error
                    serverMessage.style.cssText = "background-color: #f8d7da; color: #b71c1c"
                })
        }



    </script>

</body>

</html>