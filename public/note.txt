const express = require("express")
const multer = require("multer")
const path = require("path")
const fs = require("fs")
const util = require("util")
const exp = require("constants")
const https = require("https");
const unlinkFile = util.promisify(fs.unlink)

const storage = multer.diskStorage({
    destination: function (req, file, cb) {
      cb(null, './public/img/upload/')
    },
    filename: function (req, file, cb) {
      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9)
      cb(null, uniqueSuffix + path.extname(file.originalname))
    }
})

const storage2 = multer.diskStorage({
    destination: function (req, file, cb) {
      cb(null, './public/murid/upload/')
    },
    filename: function (req, file, cb) {
      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9)
      cb(null, uniqueSuffix + path.extname(file.originalname))
    }
})
  
const upload = multer({ 
    storage: storage, 
    limits: {fileSize:5000000},
    fileFilter: function(req, file, cb){
        checkFileType(file, cb)
    }
}).any()

const upload2 = multer({ 
    storage: storage2, 
    limits: {fileSize:5000000},
    fileFilter: function(req, file, cb){
        checkFileType(file, cb)
    }
}).any()

function checkFileType (file, cb) {
    const fileTypes = /jpeg|png|jpg/
    const extname = fileTypes.test(path.extname(file.originalname).toLowerCase())
    const mimetype = fileTypes.test(file.mimetype)

    if(mimetype && extname){
        return cb(null, true)
    } else {
        cb("Please upload images only")
    }
}

const port = 3000

const app = express()

app.use(express.json())
app.use(express.urlencoded({extended:false}))

app.set("view engine", "ejs")

app.use(express.static("public"))

const pages = ["index", "about", "setting", "adiva"];

pages.forEach(page => {
    app.get(`/${page === 'index' ? '' : page}`, (req, res) => {
        const filePath = (page === 'index' || page === 'about' || page === 'setting') ? page : `murid/${page}`;
        res.render(filePath);
    });
});

app.get("/foto", (req, res) => {
    let images = []
    fs.readdir("./public/img/upload", (err, files) =>{
        if(!err){
            files.forEach(file => {
                images.push(file)
            })
            res.render("foto", {images:images})
        } else {
            console.log(err)
        }
    })
})

app.post("/upload", (req, res) => {
    upload(req, res, (err) => {
        if(!err && req.files != ""){
            res.status(200).send()
        } else if(!err && req.files == ""){
            res.statusMessage = "Please select an image to upload"
            res.status(400).end()
        } else {
            res.statusMessage = (err === "Please upload images only") ? err : "Photo exceed limit of 10 MB"
            res.status(400).end()
        }
    })
})

app.post("/upload2", (req, res) => {
    upload2(req, res, (err) => {
        if(!err && req.files != ""){
            res.status(200).send()
        } else if(!err && req.files == ""){
            res.statusMessage = "Please select an image to upload"
            res.status(400).end()
        } else {
            res.statusMessage = (err === "Please upload images only") ? err : "Photo exceed limit of 10 MB"
            res.status(400).end()
        }
    })
})

const options = {
    key: fs.readFileSync('server.key'),
    cert: fs.readFileSync('server.cert')
};

https.createServer(options, app).listen(port, () => {
    console.log(`Server running at https://localhost:${port}/`);
});

handleRoute("./public/murid/upload", "adiva", "/murid/adiva");

app.get("/adiva", (req, res) => {
    // Mendapatkan daftar gambar dari direktori 'murid/upload'
    const dir = "./public/murid/upload";
    fs.readdir(dir, (err, files) => {
        if (err) {
            console.log(err);
            res.status(500).send("Internal Server Error");
        } else {
            // Mengirim daftar gambar ke view 'adiva'
            res.render("murid/adiva", { images: files });
        }
    });
});